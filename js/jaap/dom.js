// Generated by IcedCoffeeScript 1.2.0s

(function(global, exports) {
  "use strict";    
    var gatherCss, specificity, testSpecificity, _crawl,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  exports.create = function(tag, innerHTML) {
    var elem;
    elem = document.createElement(tag);
    elem.innerHTML = innerHTML;
    return [elem, elem.children];
  };

  exports.toggleClass = function(e, n) {
    if (0 <= e.className.indexOf(n)) {
      return e.className = e.className.replace(RegExp("(?:^|\\s)" + n + "(?!\\S)"), '');
    } else {
      return e.className += " " + n;
    }
  };

  exports.crawl = function(docFun, doneFun) {
    return _crawl(docFun, doneFun, document, [document.location.href.replace(/#.*/, '')]);
  };

  _crawl = function(docFun, doneFun, doc, visited, visits, iframe) {
    var a, href, _i, _len, _ref;
    if (visits == null) visits = [];
    if (iframe == null) iframe = null;
    docFun(doc);
    if (!iframe) {
      iframe = document.createElement('iframe');
      iframe.className = 'hidden';
      document.body.insertBefore(iframe, document.body.firstChild);
    }
    _ref = document.querySelectorAll('a');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      href = a.href.replace(/#.*/, '');
      if (!(__indexOf.call(visits, href) >= 0 || __indexOf.call(visited, href) >= 0 || href.match(/\.[^.]{0,5}/) || a.host !== document.location.host)) {
        visits.push(href);
      }
    }
    if (visits.length) {
      href = visits.pop();
      visited.push(href);
      iframe.onload = function() {
        return _crawl(docFun, doneFun, iframe.contentDocument, visited, visits, iframe);
      };
      return iframe.setAttribute('src', href);
    } else {
      console.log('removing iframe');
      iframe.parentNode.removeChild(iframe);
      return doneFun();
    }
  };

  exports.verifyCss = function() {
    var className, css, decl, elem, elementsWithoutStyling, fullName, hasAtLeastOneStyledPropertyNotFromUniversal, idName, matches, matchesSelector, prop, sel, sels, specificity, tagName, usedElems, val, _i, _len, _ref, _ref2;
    matchesSelector = (function(e) {
      return e.matchesSelector || e.webkitMatchesSelector || e.mozMatchesSelector || e.oMatchesSelector || e.msMatchesSelector;
    })(document.documentElement);
    if (!matchesSelector) return;
    elementsWithoutStyling = ['head', 'title', 'link', 'meta', 'script', 'style', 'header', 'figure', 'figcaption', 'hgroup', 'nav', 'footer', 'summary', 'details', 'article', 'section', 'aside'];
    usedElems = {};
    css = gatherCss.apply(null, document.styleSheets);
    _ref = document.querySelectorAll('*');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      tagName = elem.nodeName.toLowerCase();
      hasAtLeastOneStyledPropertyNotFromUniversal = false;
      _ref2 = css.properties;
      for (prop in _ref2) {
        if (!__hasProp.call(_ref2, prop)) continue;
        sels = _ref2[prop];
        matches = {};
        for (sel in sels) {
          if (!__hasProp.call(sels, sel)) continue;
          val = sels[sel];
          if (!(matchesSelector.call(elem, sel))) continue;
          specificity = css.selectors[sel];
          decl = "" + sel + " { " + prop + ": " + val + "; }";
          if (matches[specificity]) {
            console.log("Error, element " + tagName + " declares property " + prop + " more than once at same specificity:\n  Before: " + matches[specificity] + "\n  Now:    " + decl);
          } else {
            hasAtLeastOneStyledPropertyNotFromUniversal = sel !== '*';
            matches[specificity] = decl;
          }
        }
      }
      idName = elem.id ? '#' + elem.id : '';
      className = elem.className ? '.' + elem.className.split(' ').join('.') : '';
      fullName = "" + tagName + idName + className;
      if (!hasAtLeastOneStyledPropertyNotFromUniversal) {
        if (__indexOf.call(elementsWithoutStyling, tagName) < 0) {
          console.log("Error, '" + fullName + "' only styling comes from the universal selector - likely an error.");
        }
      } else {
        if (__indexOf.call(elementsWithoutStyling, tagName) >= 0) {
          console.log("Error, '" + fullName + "' has unexpected styling applied beyond the universal selector - likely an error.");
        }
      }
    }
    console.log("Done verifying CSS.");
  };

  gatherCss = function() {
    var CHARSET_RULE, FONT_FACE_RULE, IMPORT_RULE, MEDIA_RULE, PAGE_RULE, STYLE_RULE, UNKNOWN_RULE, css, property, rule, selector, selectors, sheet, sheets, style, value, _base, _i, _j, _k, _l, _len, _len2, _len3, _len4, _len5, _m, _ref;
    sheets = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    UNKNOWN_RULE = 0;
    STYLE_RULE = 1;
    CHARSET_RULE = 2;
    IMPORT_RULE = 3;
    MEDIA_RULE = 4;
    FONT_FACE_RULE = 5;
    PAGE_RULE = 6;
    css = {
      properties: {},
      selectors: {},
      values: {}
    };
    for (_i = 0, _len = sheets.length; _i < _len; _i++) {
      sheet = sheets[_i];
      _ref = sheet.cssRules;
      for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
        rule = _ref[_j];
        if (!(rule.type === STYLE_RULE)) continue;
        selectors = rule.selectorText.split(',');
        for (_k = 0, _len3 = selectors.length; _k < _len3; _k++) {
          selector = selectors[_k];
          css.selectors[selector] = specificity(selector);
        }
        style = rule.style;
        for (_l = 0, _len4 = style.length; _l < _len4; _l++) {
          property = style[_l];
          value = style.getPropertyValue(property);
          if ((_base = css.properties)[property] == null) _base[property] = {};
          for (_m = 0, _len5 = selectors.length; _m < _len5; _m++) {
            selector = selectors[_m];
            if (css.properties[property][selector]) {
              puts("Oddity: " + css.properties[property][selector]);
            }
            css.properties[property][selector] = value;
          }
        }
      }
    }
    return css;
  };

  specificity = function(s) {
    var classes, elems, ids, sufficient_base, _ref, _ref2, _ref3;
    s = s.replace('*', '');
    s = s.replace(/"[^"]*"/g, '');
    s = s.replace(/'[^"]*'/g, '');
    s = s.replace(/\[[^\]]*\]/g, '[]');
    s = s.replace(/[>+~]/g, ' ');
    while (0 <= s.indexOf('(')) {
      s = s.replace(/\([^\)]*?\)/, '');
    }
    s = s.replace(/:(first-child|last-child|link|visited|hover|active|focus|lang)/g, '.pseudo-class');
    s = s.replace(/::?[\w-]+/g, ' pseudo-elem');
    ids = ((_ref = s.match(/#[\w-]+/g)) != null ? _ref.length : void 0) || 0;
    classes = ((_ref2 = s.match(/\.[\w-]+|\[\]/g)) != null ? _ref2.length : void 0) || 0;
    elems = ((_ref3 = s.match(/(^|\s)[\w_-]+/g)) != null ? _ref3.length : void 0) || 0;
    sufficient_base = 1000;
    return ids * sufficient_base * sufficient_base + classes * sufficient_base + elems;
  };

  testSpecificity = function() {
    var test;
    test = function(s, e) {
      if (e !== specificity(s)) debugger;
    };
    test("*", 0);
    test("li", 1);
    test("li:first-line", 2);
    test("ul li", 2);
    test("ul ol+li", 3);
    test("h1 + *[rel=up]", 1001);
    test("ul ol li.red", 1003);
    test("li.red.level", 2001);
    test("body::before", 2);
    test("div p", 2);
    test(".sith", 1000);
    test("div p.sith", 1002);
    test("##sith", 1000000);
    test("body ##darkside .sith p", 1001002);
    test("p:has( a[href] )", 2);
    return test("body##top:lang(fr-ca) div.alert", 1002002);
  };

}).call(undefined, window, (function() {
  var _base;
  if (window.jaap == null) window.jaap = {};
  if ((_base = window.jaap).dom == null) _base.dom = {};
  return window.jaap.dom;
})());
