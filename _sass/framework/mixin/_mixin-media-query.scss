
@mixin responsive-type() {
  
  $breakpoint: undefined;   
  
  @each $candidate in $responsive-type-table {
    
    $ordinal: nth($candidate, 1);
    $trigger: nth($candidate, 2);    
    
    @if $ordinal == 0 {
      $breakpoint: $candidate;
    }
    
    @if $ordinal < 0 {
      @if responsive(max-width, $trigger) {
        $breakpoint: $candidate;
      }
    }

    @if $ordinal > 0 {
      @if responsive(min-width, $trigger) {
        $breakpoint: $candidate;
      }
    }
  }
  
  $bem: nth($breakpoint, 3);
  $el: nth($breakpoint, 4);
    
  // $body-ppcap: get_metric_for_metric(cap, $root-font-family, ppem, $body-ppem);
  // $body-ppex: get_metric_for_metric(ex, $root-font-family, ppem, $body-ppem);
  // $body-ptbl: get_metric_for_metric(baseline, $root-font-family, ppem, $body-ppem);
}

@mixin diet {  
  $call: responsive-capture(_all);
  @media _all { @content; }

  $call: responsive-capture(_none);
  @media _none { @content; }

  @each $property in get_responsive_properties() {
    @if $property != '_all' and $property != '_none' {      
      @each $value in get-responsive-values($property) {
          
        $call: responsive-capture($property, $value);
        @media ($property: $value) { @content; }
      }
    }
  }
}

@mixin unit($property, $value, $pem: $bem) {
  $px: $value;

  @if       el == unit($value) { $px: ($value /  1el) * $el; }
  @else if bem == unit($value) { $px: ($value / 1bem) * $bem; }
  @else { @include debug-warn("Unknown unit for #{$property}: #{$value}"); }
  
  @if in-development-mode() { -dev-#{$property}: $px; }
  #{$property}: $px / $pem * 1em;
  #{$property}: $px / $rem * 1rem;
}