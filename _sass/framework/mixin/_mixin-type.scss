@mixin at-font-face($name, $unicode-range: false) {
  @unless $type-disable-font-face {  
    @font-face {

      font-family: quote($name);
      font-weight: type-name-get-font-weight($name);
      font-style:  type-name-get-font-style($name);    
      
      src: url('/fonts/#{$name}.eot');
      
      @if type-name-is-postscript-flavored($name) {
        src: url('/fonts/#{$name}.eot?#iefix') format('eot'), // Todo, Jaap Suter, January 2012: investigate format('embedded-opentype'),
             url('/fonts/#{$name}.woff') format('woff'),
             url('/fonts/#{$name}.otf') format('opentype'),
             url('/fonts/#{$name}.ttf') format('truetype');
      } @else {  
        src: url('/fonts/#{$name}.eot?#iefix') format('eot'),  // Todo, Jaap Suter, January 2012: investigate format('embedded-opentype'),
             url('/fonts/#{$name}.woff') format('woff'),
             url('/fonts/#{$name}.ttf') format('truetype');
      }

      @if $unicode-range {
        unicode-range: unquote($unicode-range);
      }
    }
  }
}

@mixin abstract-font-face-family($name, $unicode-range: false) {
  %#{$name} {
    font-family: #{$name, type-name-get-font-family-fallback($name)};
    font-weight: type-name-get-font-weight($name);
    font-style:  type-name-get-font-style($name);
  }
}

@mixin small-caps {
  text-rendering: optimizeSpeed;
  font-variant: small-caps;
}

@mixin emerem($prop, $val) {
  #{$prop}: em($val);
  #{$prop}: rem($val);
}

@mixin change-type($to-font-family, $such-that-metric, $has-value) {

  @extend %#{$to-font-family};
  font-weight: 400;
  font-size: 1em;
  position: relative;
  
  $line-height-scale: 1;
  $abs-modulo-helper: 999;

  $ppem: get_metric_for_metric(ppem, $to-font-family, $such-that-metric, $has-value);
  $pplh: ceil($ppem * $line-height-scale / $body-ppgd) * $body-ppgd;
  $ppem: $ppem + if(is-odd($pplh -$ppem), 1, 0);
  
  $ptbl: get_metric_for_metric(baseline, $to-font-family, ppem, $ppem);
  
  $half-leading: floor(($pplh - $ppem) / 2);
  $body-half-leading: floor(($body-ppgd - $body-ppem) / 2);
  
  $top: 0;
  $top: $top - $ptbl - $half-leading;
  $top: $top + $body-ptbl + $body-half-leading;
  $top: ($top + $abs-modulo-helper * $body-ppgd) % $body-ppgd;

  // @debug "top = #{$top} for #{$to-font-family} with #{$such-that-metric}=#{$has-value} on a #{$body-ppem}/#{$body-ppgd} body means: #{$ppem}/#{$pplh} with baseline at #{$ptbl}+#{$half-leading} (from: #{$body-ptbl}+#{$body-half-leading})";
      
  @include emerem(font-size, $ppem);
  @include emerem(line-height, $pplh);
  @include emerem(top, $top);

  @content;
}

@mixin background-image-baseline-grid($ppem, $ppgd) {  
  @include background-image(make_svg_baseline_grid($root-font-family, $ppem, $ppgd));

  @include background-size(em($ppgd) em($ppgd));
  @include background-size(rem($ppgd) rem($ppgd));
  
  // $c0: rgba($black, 0.2);
  // $c1: rgba($blue, 0.9);
  // $c2: $white;
  // $c3: rgba($red, 0.9);
  // 
  // @include background-image(linear-gradient($c0 0, $c0 1gd, $c1 1gd, $c1 2gd, $c2 2gd, $c2 3gd, $c3 3gd, $c3 6gd));
  // @include background-size(100% 4gd);
  // background-position: 0 ($body-baseline / $body-ppem * 1em);
  // background-position: 0 $body-baseline * 1px;
}
