@function debug-warn($message) { @debug raise_error_message($message); }
@function debug-warn-if($expression, $message) { @if ($expression) { $dummy: debug-warn($message); }  @return 0; }
@function debug-warn-if-message($message) { @return debug-warn-if($message != "", $message); }

@function min($lhs, $rhs) { @return if($lhs < $rhs, $lhs, $rhs); }
@function max($lhs, $rhs) { @return if($lhs > $rhs, $lhs, $rhs); }

@function is-odd($n) { @return 1 == ($n % 2); }

@function percent($n, $t) { @return $n / $t * 100%; }

@function interpolate($from, $to, $current, $min, $max) {
  $domain: abs($to - $from);
  $range: abs($max - $min);
  
  @return $min + ((abs($current - $from) / $domain) * $range);
}

@function round-two-decimals($n) {
  @return round($n * 100) / 100;
}

@function units($value, $pp-em-override: $pp-em) {
  $pp: to-pp($value, $pp-em-override);
  
  @if in-development-mode() {
    @return ($pp, from-pp($pp, 1 / $pp-em-override * 1em));
  } @else {
    @return (     from-pp($pp, 1 / $pp-em-override * 1em), from-pp($pp, 1 / $pp-rem * 1rem));
  }
}

@function to-pp($val, $pp-em-override: $pp-em) {
  @if type-of($val) == list {
    
    $ret: ();    
    @each $elem in $val { $ret: append($ret, to-pp($elem, $pp-em-override)); }
    @return $ret;
    
  } @else {
  
    @if      cap == unit($val) { @return $val * $pp-cap / 1cap; }
    @if       el == unit($val) { @return $val * $pp-el / 1el; }
    @else if  em == unit($val) { @return $val * $pp-em-override / 1em; }
    @else if  px == unit($val) { @return $val; }
    @else if '%' == unit($val) { @return $val; }
    @else if    unitless($val) { @return $val; }
    @else { $call: debug-warn("to-pp got unexpected unit for #{$val}"); @return $val; }
  }
}

@function from-pp($val, $factor) {
  @if type-of($val) == list {
    
    $ret: ();    
    @each $elem in $val { $ret: append($ret, from-pp($elem, $factor)); }
    @return $ret;
    
  } @else {
    @if       px == unit($val) { @return $val * $factor; }
    @else if '%' == unit($val) { @return $val; }
    @else if    unitless($val) { @return $val; }
    @else { $call: debug-warn("from-pp got unexpected unit for #{$val}"); @return $val; }
  }
}



@function is-whole($n) { @return floor($n) == $n; }

@function try-incremental($n, $numerator, $denominator, $r) {
  @if $n != $r { @return $r; }
  $r: $n * $numerator / $denominator;
  @if is-whole($r) { @return $r; }
  @return $n;
}
