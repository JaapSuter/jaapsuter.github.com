@mixin at-font-face($name, $unicode-range: false) {
  @unless $type-disable-font-face {
    @font-face {

      font-family: quote(blank-font-style-and-weight($name));
      font-weight: type-name-get-font-weight($name);
      font-style:  type-name-get-font-style($name);
      
      src: url('/fonts/#{$name}.eot');
      
      @if type-name-is-postscript-flavored($name) {
        src: url('/fonts/#{$name}.eot?#iefix') format('eot'), // Todo, Jaap Suter, January 2012: investigate format('embedded-opentype'),
             url('/fonts/#{$name}.woff') format('woff'),
             url('/fonts/#{$name}.otf') format('opentype'),
             url('/fonts/#{$name}.ttf') format('truetype');
      } @else {  
        src: url('/fonts/#{$name}.eot?#iefix') format('eot'),  // Todo, Jaap Suter, January 2012: investigate format('embedded-opentype'),
             url('/fonts/#{$name}.woff') format('woff'),
             url('/fonts/#{$name}.ttf') format('truetype');
      }
    }
  }
}

@mixin abstract-font-face-family($name) {
  .#{$name} {
    $fmly-name: blank-font-style-and-weight($name);
  
    font-family: $fmly-name, type-name-get-font-family-fallback($name);
  
    font-weight: type-name-get-font-weight($name);
    font-style:  type-name-get-font-style($name);
  }
}

%type-c2pc {
  text-transform: uppercase; 
  text-rendering: optimizeSpeed;
}

%type-c2sc {
  @extend %type-c2pc;
  letter-spacing: 0.1em;
  font-size: 1.1em; 
}

@mixin background-image-baseline-grid() {  
  $baseline-background-use-svg: true;
  
  @if $baseline-background-use-svg {
    @include background-image(make_svg_baseline_grid($body-font-family, $pp-em, $pp-el));

    @each $values in units(1el 1el) {
      background-size: $values;
    }
  
  } @else {
  
    $c0: $transparent;
    $c1: rgba($blue, 0.3);
  
    @include background-image(linear-gradient($c0 0, $c0 50%, $c1 50%, $c1 100%));
    @each $values in units(100% 2el) {
      background-size: $values;
    }

    @include units(background-position, (0 $pp-bo));
  }
}

@mixin change-type($to-font-family, $such-that-metric, $has-value, $leading-el-per-el: 1, $pp-bo-offset: 0) {

  @extend .#{$to-font-family};
  
  $new-pp-em: undefined;
  @if $such-that-metric == ppem {
    $new-pp-em: to-pp($has-value);
  } @else {
    $new-pp-em: get-font-size-when-metric($to-font-family, $such-that-metric, to-pp($has-value));
  }
  
  $new-pp-el: ceil($new-pp-em / $pp-el) * $pp-el;
    
  @if $leading-el-per-el != 1 {
    $new-pp-el: floor($pp-el / $leading-el-per-el);    
  }
  
  $new-pp-half-leading: ($new-pp-el - $new-pp-em) / 2;  
  $new-pp-bo: get-font-metric-at-size($to-font-family, $new-pp-em, baseline) + $new-pp-half-leading;  
  
  $modulo-up: 999;
  $modulo-down: $pp-el / 1px;  
  
  $pp-top: ceil(0 - $new-pp-bo + $pp-bo + $pp-bo-offset); 
  $pp-top: ($pp-top + $modulo-up * $pp-el) % $modulo-down;
  
  // Think carefully here Jaap, or you know; actually write a useful comment. Sigh...
  @if $pp-top > ($pp-el / 2) {
    $pp-top: $pp-top - $pp-el;
  }
  
  position: relative;
  
  $prev-pp-em: $pp-em;
  @include units(font-size, $new-pp-em, $prev-pp-em);
  $pp-em: $new-pp-em;
  
  @include units(line-height, $new-pp-el);
  @include units(top, $pp-top);
  
  @content;
  
  $pp-em: $prev-pp-em;
}
