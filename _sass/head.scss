@import "framework/extern";
@import "framework/const";
@import "framework/func";
@import "framework/mixin";

// Up to this point, no styling should be applied - we've only defined
// constants, functions, and mixins. Hence the resulting compressed CSS
// file (with comments stripped, etc.) should be of zero size.

// @unless $type-disable-font-face {
//   @if in_development_mode { @import url(at-font-face.dev.css); }
//   @else { @each $font in get_font_list() { @include at-font-face($font); } }  
// } 
// 
// @each $font in get_font_list() { @include abstract-font-face-family($font); }
// 
// $import-base-normalize-separately: in_development_mode();
// @import "base/base-normalize";
// 
// @import "base/base-reset";
// @import "base/base-type";
// 
// @include debug-message-initialize();
// 
// figure { overflow: hidden; }
// 
// html {
//   min-height: 100%;
//   width: 100%;
//   max-width: 100%;  
// }
// 
// body {
//   position: relative;
//   min-height: 100%;
//   width: 100%;
//   max-width: 100%;
//   margin: 0 auto;
// }
// 
// #dimensions {
//   @extend %tmn4n;
//   font-size: 10px;
//   line-height: 12px;
//   position: fixed;
//   background-color: rgba($black, 0.5);
//   color: rgba(lighten(saturate($blue, 50%), 50%), 0.9);
//   position: fixed;
//   bottom: 2em;
//   left: 0;
// }
// 
// 
// .type-comparison {
//   $font-family: tsn4n;
//   
//   position: relative;
// 
//   .custom {
//     color: rgba(#f33, 0.5);
//     @extend %#{$font-family};
//   }
// 
//   .installed {
//     color: rgba(#33f, 0.5);
//     position: absolute;
//     top: 0;
//     left: 0;
//     font-family: type-name-get-font-family-fallback($font-family);
//   }
// }
// 
// body {
//   font-size: 5gd;
// }

@include responsify() {
  
  $width-msg: undefined;  

  @if      $mq-min-px == undefined { $width-msg: "width < #{$mq-max-px / $body-ppgd}" }
  @else if $mq-max-px == undefined { $width-msg: "#{$mq-min-px / $body-ppgd} < width" }
  @else                            { $width-msg: "#{$mq-min-px / $body-ppgd} < width < #{$mq-max-px / $body-ppgd}" }

  @include debug-message("#{$width-msg}: #{$body-ppem}/#{$body-ppgd}(#{round-two-decimals($body-ppgd / $body-ppem)})");
}

@include responsify() {
  body { color: red; }
}
